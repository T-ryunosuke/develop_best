posts/show.html.erb の一部
     <div class="card-actions justify-end mb-4 mr-6">
        <% if current_user&.mine?(@post) %>
        <div class="flex items-center space-x-4">
          <%= link_to edit_post_path(@post) do %>
            <i class="ri-edit-box-line text-2xl text-blue-600"></i>
          <% end %>
          <i class="ri-delete-bin-5-line text-2xl text-red-400 cursor-pointer" onclick="my_modal.showModal()"></i>
          <dialog id="my_modal" class="modal">
            <div class="modal-box">
              <p class="text-center text-lg font-medium">削除しますか？</p>
              <div class="modal-action flex justify-between mx-20">
                <form method="dialog">
                  <button class="btn btn-outline outline-none font-thin text-xs md:text-base">キャンセル</button>
                </form>
                <%= link_to "削除", post_path(@post), class: "btn btn-outline font-thin text-xs text-red-400 md:text-base", data: { turbo_method: :delete } %>
              </div>
            </div>
          </dialog>
        </div>
        <% else %>
        <!-- "いいね"アイコンをカードの左端に表示 -->
        <div class="flex items-center space-x-2">
          <%= render 'likes/like', post: @post, liker: @post.liked_by?(current_user) %>
        </div>
        <% end %>
      </div>


like/_like.html.erb
<turbo-frame id="like_<%= post.id %>">
  <% if liker %>
    <%= link_to post_likes_path(post), data: { turbo_method: :delete } do %>
      <i class="ri-heart-fill text-2xl text-red-400 hover:animate-pulse"></i>
      <span class="font-light text-sm text-gray-700"><%= post.likes.count %></span>
    <% end %>
  <% else %>
    <%= link_to post_likes_path(post), data: { turbo_method: :post } do %>
      <i class="ri-heart-line text-2xl text-gray-500 hover:animate-pulse"></i>
      <span class="font-light text-sm text-gray-400"><%= post.likes.count %></span>
    <% end %>
  <% end %>
</turbo-frame>


likes_controller.rb
  before_action :set_post

  def create
    current_user.likes.create!(post_id: @post.id)
    render turbo_stream: turbo_stream.replace(
      "like_#{@post.id}",
      partial: 'likes/like',
      locals: { post: @post, liker: true },
    )
  end

  def destroy
    like = current_user.likes.find_by!(post_id: @post.id)
    like.destroy!
    render turbo_stream: turbo_stream.replace(
      "like_#{@post.id}",
      partial: 'likes/like',
      locals: { post: @post, liker: false },
    )
  end

  private

  def set_post
    @post = Post.find(params[:post_id])
  end


user.rbの一部
  has_many :likes, dependent: :destroy
  has_many :liked_posts, through: :likes, source: :post

post.rbの一部
  has_many :likes, dependent: :destroy
  has_many :liked_users, through: :likes, source: :user

  def liked_by?(user)
    liked_users.exists?(user.id)
  end

like.rbの一部
  belongs_to :user
  belongs_to :post

  validates :user_id, uniqueness: { scope: :post_id }


routes.rb の一部
  resources :posts do
    resource :likes, only: %i[create destroy]
  end

schema.rb
ActiveRecord::Schema[7.2].define(version: 2024_08_23_104606) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "categories", force: :cascade do |t|
    t.string "name", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["name"], name: "index_categories_on_name", unique: true
  end

  create_table "likes", force: :cascade do |t|
    t.bigint "user_id", null: false
    t.bigint "post_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["post_id"], name: "index_likes_on_post_id"
    t.index ["user_id", "post_id"], name: "index_likes_on_user_id_and_post_id", unique: true
    t.index ["user_id"], name: "index_likes_on_user_id"
  end

  create_table "posts", force: :cascade do |t|
    t.string "title", limit: 255, null: false
    t.string "image"
    t.text "content", null: false
    t.bigint "user_id", null: false
    t.bigint "category_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["category_id"], name: "index_posts_on_category_id"
    t.index ["user_id"], name: "index_posts_on_user_id"
  end

  create_table "users", force: :cascade do |t|
    t.string "name", null: false
    t.string "email", null: false
    t.string "crypted_password"
    t.string "salt"
    t.integer "age"
    t.integer "gender"
    t.text "profile"
    t.string "avatar"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["email"], name: "index_users_on_email", unique: true
    t.index ["name"], name: "index_users_on_name"
  end

  add_foreign_key "likes", "posts"
  add_foreign_key "likes", "users"
  add_foreign_key "posts", "categories"
  add_foreign_key "posts", "users"
end

上記はいいね機能についての記述です。
以下に記述している_post.html.erbのパーシャルファイルを使って、自分がいいねをした投稿を一覧で表示するページを作ることはできますか？。
<div id="<%= dom_id(post) %>">
  <div class="rounded-md bg-base-100 shadow-xl h-full flex flex-col outline outline-gray-200">
    <div class="card-body flex flex-col items-center">
      <div class="flex-grow w-full">
        <p class="text-end text-xs text-gray-400"><%= time_ago_in_words(post.created_at) %>前</p>
        <div class="text-xl md:text-3xl">
          <div><%= link_to post.title, post_path(post) %></div>
        </div>

        <div>
          <%= link_to post.category.name, posts_path(category_name: post.category.name),class: "badge badge-primary badge-outline badge-sm text-xs" %>
        </div>

        <div class="card-actions justify-end">
          <% if current_user&.mine?(post) %>
          <div class="flex items-center space-x-4">
            <%= link_to edit_post_path(post) do %>
              <i class="ri-edit-box-line text-2xl text-blue-600"></i>
            <% end %>
            <i class="ri-delete-bin-5-line text-2xl text-red-400 cursor-pointer" onclick="my_modal_<%= post.id %>.showModal()"></i>
            <dialog id="my_modal_<%= post.id %>" class="modal">
              <div class="modal-box">
                <p class="text-center text-lg font-medium">削除しますか？</p>
                <div class="modal-action flex justify-between mx-20">
                  <form method="dialog">
                    <button class="btn btn-outline outline-none font-thin text-xs md:text-base">キャンセル</button>
                  </form>
                  <%= link_to "削除", post_path(post), class: "btn btn-outline font-thin text-xs text-red-400 md:text-base", data: { turbo_method: :delete } %>
                </div>
              </div>
            </dialog>
          </div>
          <% else %>
          <div class="flex items-center space-x-2">
            <%= render 'likes/like', post: post, liker: post.liked_by?(current_user) %>
          </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
